<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.ecf">
<annotation>
      <appInfo>
         <meta.schema plugin="org.eclipse.ecf" id="startup" name="ECF Core Startup"/>
      </appInfo>
      <documentation>
         ECF Core Startup Extension Point.  This extension point (&lt;b&gt;org.eclipse.ecf.startup&lt;/b&gt;) allows other bundles to have arbitrary code run upon ECF startup.  Note that extensions will be run when the ECF core bundle (ID: &lt;b&gt;org.eclipse.ecf&lt;/b&gt;) is started by the runtime, not necessarily upon platform startup.  Of course, if the &lt;b&gt;org.eclipse.ecf&lt;/b&gt; bundle is started at platform startup, then extensions of this extension point will also be run.
      </documentation>
   </annotation>

   <element name="extension">
      <complexType>
         <sequence>
            <element ref="ecfstart"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="ecfstart">
      <complexType>
         <sequence>
            <element ref="property" minOccurs="0" maxOccurs="unbounded"/>
         </sequence>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  The fully qualified name of the class that implements the org.eclipse.ecf.core.start.IECFStart interface.
               </documentation>
               <appInfo>
                  <meta.attribute kind="java" basedOn="org.eclipse.ecf.core.start.IECFStart"/>
               </appInfo>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         0.9.0
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         Here is an example usage of this extension point:

&lt;pre&gt;
&lt;extension
      point=&quot;org.eclipse.ecf.startup&quot;&gt;
   &lt;ecfstart
         class=&quot;org.eclipse.ecf.example.collab.start.CollabStart&quot;/&gt;
&lt;/extension&gt;
&lt;/pre&gt;

Note that the CollabStart class must implement the &lt;b&gt;org.eclipse.ecf.start.IECFStart&lt;/b&gt; interface.

Here&apos;s an example implementation class:

&lt;pre&gt;
public class CollabStart implements IECFStart {
 Discovery discovery = null;
 public IStatus startup(IProgressMonitor monitor) {
  try {
   AccountStart as = new AccountStart();
   as.loadConnectionDetailsFromPreferenceStore();
   Collection c = as.getConnectionDetails();
   for (Iterator i = c.iterator(); i.hasNext();) {
    startConnection((ConnectionDetails) i.next());
   }
  } catch (Exception e) {
   return new Status(IStatus.ERROR, ClientPlugin.PLUGIN_ID, 200,
     &quot;Exception in starting connection&quot;, e);
  }
  return new Status(IStatus.OK, ClientPlugin.PLUGIN_ID, 100, &quot;OK&quot;, null);
 }
 private void startConnection(ConnectionDetails details) throws Exception {
  CollabClient client = new CollabClient();
  //ClientPlugin.log(&quot;ECF: Autostarting containerType=&quot;+details.getContainerType()+&quot;,uri=&quot;+details.getTargetURI()+&quot;,nickname=&quot;+details.getNickname());
  client.createAndConnectClient(details.getContainerType(), details
    .getTargetURI(), details.getNickname(), details.getPassword(),
    ResourcesPlugin.getWorkspace().getRoot());
 }
}

&lt;/pre&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         The API for the &lt;b&gt;org.eclipse.ecf.startup&lt;/b&gt; extension point is provided by the
&lt;b&gt;org.eclipse.ecf.startup.IECFStartup&lt;/b&gt; interface:

&lt;pre&gt;
/**
 * Interface that must be implemented by extensions of the org.eclipse.ecf.start
 * extension point. Such extensions will have their start method called by a new
 * Job upon ECF startup.
 */
public interface IECFStart {
 /**
  * Start ECF client or server.
  * 
  * @return IStatus the status of the start
  * @throws ECFStartException
  *             if some exception thrown during start
  */
 public IStatus startup(IProgressMonitor monitor);
}
&lt;/pre&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         No implementation supplied for this extensinion point.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         Copyright (c) 2004 Composent, Inc. and others.
All rights reserved. This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html.  Contributors:  Composent, Inc. - initial API and implementation
      </documentation>
   </annotation>

</schema>
