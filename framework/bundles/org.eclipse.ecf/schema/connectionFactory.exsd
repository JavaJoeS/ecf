<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.ecf">
<annotation>
      <appInfo>
         <meta.schema plugin="org.eclipse.ecf" id="connectionFactory" name="ECF Connection Factory"/>
      </appInfo>
      <documentation>
         This extension allows plugins to register themselves as &apos;providers&apos; of ECF connection factories.  Once registered via this extension point, plugins can provide implementations of custom ISynchAsynchConnection instances via the ECF connection factory (&lt;b&gt;org.eclipse.ecf.core.comm.ConnectionFactory&lt;/b&gt;).
&lt;p&gt;Plugins using this extension point can define new implementation classes of the core ISynchAsynchConnection interface.  When client requests are made to ECF to create &lt;b&gt;ISynchAsynchConnection&lt;/b&gt; instances via the ConnectionFactory.makeSynchAsynchConnection() methods, requests to create instances of the appropriate type will be re-directed to the given extension.
      </documentation>
   </annotation>

   <element name="extension">
      <complexType>
         <sequence>
            <element ref="connectionFactory"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="connectionFactory">
      <annotation>
         <documentation>
            Connection factory definition
         </documentation>
      </annotation>
      <complexType>
         <sequence>
            <element ref="defaultargument"/>
         </sequence>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  Required class that provides implementation of connection factory.  The class must implement &lt;b&gt;org.eclipse.ecf.core.comm.provider.ISynchAsynchConnectionInstantiator&lt;/b&gt;
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  Optional name for connection factory.  If this name is not explicitly given, the class will be used for the name.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="description" type="string">
            <annotation>
               <documentation>
                  An optional description for the connection factory.
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="defaultargument">
      <annotation>
         <documentation>
            Default argument to be passed to makeInstance method.  Value of this element (if any) is used to provide a default value for the given argument
         </documentation>
      </annotation>
      <complexType>
         <attribute name="type" type="string">
            <annotation>
               <documentation>
                  The fully qualified type of the argument.
               </documentation>
            </annotation>
         </attribute>
         <attribute name="value" type="string">
            <annotation>
               <documentation>
                  The value for the default argument
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  An optional name for the defaultargument
               </documentation>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         0.2.0
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         Here&apos;s an extension that associates a class org.eclipse.ecf.test.FooContainerFactory with name &apos;foo&apos; in the ECF &lt;b&gt;SharedObjectContainerFactory&lt;/b&gt;:

&lt;pre&gt;
   &lt;extension
         point=&quot;org.eclipse.ecf.connectionFactory&quot;&gt;
      &lt;connectionFactory
            class=&quot;org.eclipse.ecf.provider.comm.tcp.Client$Creator&quot;
            description=&quot;TCP Client Connection Factory&quot;
            name=&quot;org.eclipse.ecf.provider.comm.tcp.Client&quot;&gt;
         &lt;defaultargument
               value=&quot;10000&quot;
               type=&quot;java.lang.Integer&quot;
               name=&quot;keepAlive&quot;/&gt;
      &lt;/connectionFactory&gt;
   &lt;/extension&gt;
&lt;/pre&gt;

Here&apos;s an example implementation of this extension point:

&lt;pre&gt;
    public ISynchAsynchConnection makeInstance(ConnectionDescription description,
            ISynchAsynchConnectionEventHandler handler, Class[] clazzes,
            Object[] args) throws ConnectionInstantiationException {
        try {
            String [] argVals = description.getArgDefaults();
            Integer ka = null;
            if (argVals != null &amp;&amp; argVals.length != 0) {
                String val = argVals[0];
                if (val != null) {
                    ka = new Integer(val);
                }
            }
            if (args != null &amp;&amp; args.length != 0) {
                if (args[0] instanceof Integer) {
                    ka = (Integer) args[0];
                } else if (args[0] instanceof String) {
                    ka = new Integer((String) args[0]);
                }
            }
            return new Client(handler, ka);
        } catch (Exception e) {
            throw new ConnectionInstantiationException(
                    &quot;Exception in creating connection &quot;
                            + Client.class.getName(), e);
        }
    }
&lt;/pre&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         The API for this extension point is provided by the &lt;b&gt;org.eclipse.ecf.core.comm.ContainerFactory&lt;/b&gt; static methods.  Specifically, the &apos;makeSynchAsynchConnection&apos; static methods are to be used by clients.  The functionality provided by the extension point mechanism can be used at runtime via the &lt;b&gt;ConnectionFactory.addDescription(ConnectionDescription)&lt;/b&gt; method.  The available connection factories can be queried with the &lt;b&gt;ConnectionFactory.getDescriptions()&lt;/b&gt; method.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         The supplied implementations of this extension point are:

In org.eclipse.ecf.provider plugin:

org.eclipse.ecf.provider.tcp.Client$Creator
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         Copyright (c) 2005 Composent, Inc. and others.
All rights reserved. This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html.  Contributors:  Composent, Inc. - initial API and implementation
      </documentation>
   </annotation>

</schema>
