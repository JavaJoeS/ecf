<?xml version='1.0' encoding='UTF-8'?>
<!-- Schema file written by PDE -->
<schema targetNamespace="org.eclipse.ecf.filetransfer">
<annotation>
      <appInfo>
         <meta.schema plugin="org.eclipse.ecf.filetransfer" id="urlConnectionFactory" name="URLConnection Factory"/>
      </appInfo>
      <documentation>
         This extension point allows plugins to declare themselves as factories for creating URLConnection instances when calls to URL.openConnection() are made.  Extensions must provide a protocol specifier (e.g. &apos;bittorrent&apos;) and a class implementing the &lt;b&gt;org.eclipse.ecf.filetransfer.IURLConnectionFactory&lt;/b&gt; interface.


      </documentation>
   </annotation>

   <element name="extension">
      <complexType>
         <sequence>
            <element ref="urlConnectionFactory"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appInfo>
                  <meta.attribute translatable="true"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="urlConnectionFactory">
      <complexType>
         <attribute name="protocol" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="class" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
               <appInfo>
                  <meta.attribute kind="java"/>
               </appInfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <annotation>
      <appInfo>
         <meta.section type="since"/>
      </appInfo>
      <documentation>
         0.9.7
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="examples"/>
      </appInfo>
      <documentation>
         Here&apos;s a usage example for this extension point:

&lt;pre&gt;
   &lt;extension
         point=&quot;org.eclipse.ecf.filetransfer.urlConnectionFactory&quot;&gt;
      &lt;urlConnectionFactory
            class=&quot;org.eclipse.ecf.tests.filetransfer.URLConnectionFactory&quot;
            protocol=&quot;foobar&quot;&gt;
      &lt;/urlConnectionFactory&gt;
   &lt;/extension&gt;

&lt;/pre&gt;

When URLs with the protocol &apos;foobar&apos; are created then the URLConnectionFactory will be called when the URL.openConnection call is made.

For example:

&lt;pre&gt;
URL url = new URL(&quot;foobar://lala/blah/blah/blah&quot;);
// The following openConnection call will result in the 
// URLConnectionFactory.createURLConnection(URL url) being called.
URLConnection connection = url.openConnection();
&lt;/pre&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="apiInfo"/>
      </appInfo>
      <documentation>
         IURLConnectionFactory API:

&lt;pre&gt;
/**
 * Factory for creating URLConnection instances.
 */
public interface IURLConnectionFactory {
	/**
	 * Create URLConnection instance.
	 * 
	 * @param url the URL to create the URLConnection for.  Will not be null.
	 * @return URLConnection instance that is new URLConnection instance for given URL.  Will not be null.
	 * @throws IOException thrown if some problem creating URLConnection instance
	 */
	public URLConnection createURLConnection(URL url) throws IOException;
	
}
&lt;/pre&gt;
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="implementation"/>
      </appInfo>
      <documentation>
         No supplied implementation.
      </documentation>
   </annotation>

   <annotation>
      <appInfo>
         <meta.section type="copyright"/>
      </appInfo>
      <documentation>
         Copyright (c) 2004 Composent, Inc. and others.
All rights reserved. This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html.  Contributors:  Composent, Inc. - initial API and implementation
      </documentation>
   </annotation>

</schema>
